#!/usr/bin/env python3

from resources import device, manifest
from resources.api import API
from resources.bundle import Bundle
from resources.ipsw import IPSW
import atexit
import argparse
import getpass
import glob
import os
import platform
import requests
import shutil
import sys

if not platform.system() == 'Darwin':
    sys.exit(f'[ERROR] {platform.system()} is not supported by Inferius. Exiting...')

def cleanup():
    if os.path.isdir('.tmp'):
        shutil.rmtree('.tmp')

atexit.register(cleanup)

def main():
    parser = argparse.ArgumentParser(description='Inferius - Create & Restore 64-bit custom IPSWs', usage="./inferius.py -d 'device' -i 'iOS version' -f 'IPSW' [-c/-r] [-v]")
    parser.add_argument('-d', '--device', help='Device identifier (e.g. iPhone10,2)', nargs=1)
    parser.add_argument('-i', '--version', help='iOS Version', nargs=1)
    parser.add_argument('-f', '--ipsw', help='Path to IPSW', nargs=1)
    parser.add_argument('-c', '--create', help='Create custom IPSW', action='store_true')
    parser.add_argument('-r', '--restore', help='Restore custom IPSW', action='store_true')
    parser.add_argument('-v', '--verbose', help='Print verbose output for debugging', action='store_true')
    args = parser.parse_args()

    if not args.device or not args.version:
        sys.exit(parser.print_help(sys.stderr))

    cleanup()

    api = API(args.device[0], args.version[0])
    print('verifying version')
    api.check_version()

    if not 10 <= int(args.version[0].split('.')[0]) <= 13:
        sys.exit(f'[ERROR] iOS {args.version[0]} is not supported by Inferius. Exiting...')

    elif float(args.version[0].rsplit('.', 1)[0]) <= 10.1:
        sys.exit(f'[ERROR] iOS {args.version[0]} is not supported by Inferius. Exiting...')

    cleanup()
    os.makedirs('.tmp/Inferius/ipsw')

    ipsw = IPSW(args.device[0], args.ipsw[0])

    print('extracting restore.plist')
    ipsw.extract_file('Restore.plist', '.tmp/Inferius/ipsw')

    with open('.tmp/Inferius/ipsw/Restore.plist', 'rb') as f:
        restoremanifest = manifest.RestoreManifest(f, args.device[0], api.boardconfig)

    supported_devices = [8960, 7000, 7001, 8000, 8001, 8003, 8010, 8011, 8015]

    if restoremanifest.platform not in supported_devices:
        sys.exit(f'[ERROR] Device {args.device[0]} is not supported by Inferius. Exiting...')

    if int(args.version[0].split('.')[0]) == 10 and restoremanifest.platform != 8960:
        sys.exit(f'[ERROR] iOS {args.version[0]} can only be downgraded to on A7 devices currently. Exiting...')

    print('extracting buildmanifest.plist')
    ipsw.extract_file('BuildManifest.plist', '.tmp/Inferius/ipsw')
    with open('.tmp/Inferius/ipsw/BuildManifest.plist', 'rb') as f:
        buildmanifest = manifest.Manifest(f)

    if args.device[0] not in buildmanifest.supported_devices:
        sys.exit(f"[ERROR] Specified IPSW: '{args.ipsw[0]}' does not support '{args.version[0]}'. Exiting...")

    if args.version[0] != buildmanifest.version:
        sys.exit(f"[ERROR] Specified IPSW: '{args.ipsw[0]}' is not for iOS {args.version[0]}. Exiting...")

    bundle = Bundle('.tmp/Inferius/ipsw')
    print('fetching bundle')
    bundle.fetch_bundle(args.device[0], args.version[0])

    print('verifying ipsw')
    ipsw.verify_ipsw(api.fetch_sha1(buildmanifest.buildid))
    print('extracting ipsw')
    ipsw.extract_ipsw('.tmp/Inferius/ipsw')

#    bundle.apply_patches()
    
    print('fetching latest llb')
    api.fetch_latest(buildmanifest.fetch_component_path(api.boardconfig, 'LLB'), '.tmp/Inferius/ipsw')
    print('fetching laetst iboot')
    api.fetch_latest(buildmanifest.fetch_component_path(api.boardconfig, 'iBoot'), '.tmp/Inferius/ipsw')

    print('creating IPSW')
    ipsw.create_ipsw('.tmp/Inferius/ipsw', f'{args.ipsw[0].split("/")[-1].rsplit(".", 1)[0]}_custom.ipsw')

    print('Done!')

    cleanup()

if __name__ == '__main__':
    main()