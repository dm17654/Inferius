#!/usr/bin/env python3

from utils import manifest
from utils.api import API
from utils.bundle import Bundle
from utils.dependencies import Checks
from utils.device import Device
from utils.ipsw import IPSW
from utils.restore import Restore
import argparse
import platform
import os
import sys
import tempfile


def create_ipsw(identifier, buildmanifest, ipsw_path, tmpdir):
	print('[0] Creating custom IPSW...')

	api = API()
	api.fetch_api(identifier)
	bundle = Bundle()
	ipsw = IPSW(ipsw_path)

	print('[1] Grabbing Firmware Bundle...')
	bundle.fetch_bundle(identifier, buildmanifest.version, buildmanifest.buildid, tmpdir)

	print('[2] Verifying IPSW...')
	ipsw.verify_ipsw(api.fetch_sha1(buildmanifest.buildid))

	print('[3] Extracting IPSW...')
	extracted_ipsw = '/'.join((tmpdir, 'ipsw'))
	os.mkdir(extracted_ipsw)
	ipsw.extract_ipsw(extracted_ipsw)

	print('[4] Patching components...')
	bundle.apply_patches(extracted_ipsw)

	boardconfig = api.get_board()
	api.fetch_latest(buildmanifest.fetch_component_path(boardconfig, 'LLB'), extracted_ipsw)
	bootloader_ver = api.fetch_latest(buildmanifest.fetch_component_path(boardconfig, 'iBoot'), extracted_ipsw)

	print('[5] Repacking IPSW...')
	custom_ipsw = ipsw.create_ipsw(extracted_ipsw, ipsw_path.split('/')[-1].rsplit('.', 1)[0] + '_custom.ipsw', bundle.check_update_support(), bootloader_ver)
	print(f"Finished creating custom IPSW: '{custom_ipsw}'.")

def restore_ipsw(identifier, version, ipsw_path, update):
	with open('.tmp/Inferius/ipsw/BuildManifest.plist', 'rb') as f:
		buildmanifest = manifest.Manifest(f)

	api = API(identifier)
	Checks()
	device = Device(identifier)
	ipsw = IPSW(ipsw_path)
	restore = Restore(identifier, device.platform)

	print('verifying custom IPSW')
	ipsw.verify_custom_ipsw(update, version)

	print('checking for device in pwndfu')
	device.check_pwndfu()

	print('saving blobs')
	restore.save_blobs(device.boardconfig, device.ecid, device.apnonce, update, '.tmp/Inferius')

	ibss_path = buildmanifest.fetch_component_path(device.boardconfig, 'iBSS')
	ibec_path = buildmanifest.fetch_component_path(device.boardconfig, 'iBEC')

	print('extracting ibss')
	ipsw.extract_file(ibss_path, '.tmp/Inferius/ipsw')
	print('extracting ibec')
	ipsw.extract_file(ibec_path, '.tmp/Inferius/ipsw')

	print('signing ibss')
	restore.sign_component(f'.tmp/Inferius/ipsw/{ibss_path}', '.tmp/Inferius')
	print('signing ibec')
	restore.sign_component(f'.tmp/Inferius/ipsw/{ibec_path}', '.tmp/Inferius')

	print('sending ibss')
	restore.send_component(f'.tmp/Inferius/{ibss_path.split("/")[-1].rsplit(".", 1)[0]}.img4', 'iBSS')
	print('sending ibec')
	restore.send_component(f'.tmp/Inferius/{ibec_path.split("/")[-1].rsplit(".", 1)[0]}.img4', 'iBEC')

	print('restoring')
	restore.restore(ipsw_path, device.baseband, update)

def main():
	parser = argparse.ArgumentParser(description='Inferius - Create & Restore 64-bit custom IPSWs', usage="./inferius -d 'device' -f 'IPSW' [-c/-r] [-v]")
	parser.add_argument('-d', '--device', help='Device identifier', nargs=1)
	parser.add_argument('-f', '--ipsw', help='Path to IPSW', nargs=1)
	parser.add_argument('-c', '--create', help='Create custom IPSW', action='store_true')
	parser.add_argument('-r', '--restore', help='Restore custom IPSW', action='store_true')
	parser.add_argument('-u', '--update', help='Keep data while restoring custom IPSW', action='store_true')
	args = parser.parse_args()

	if not args.device or not args.ipsw:
		sys.exit(parser.print_help(sys.stderr))
	elif not args.create and not args.restore:
		sys.exit(parser.print_help(sys.stderr))
	elif args.update and not args.restore:
		sys.exit(parser.print_help(sys.stderr))

	if platform.system() == 'Windows':
		sys.exit('[ERROR] Inferius does not support Windows. Exiting.')

	identifier = args.device[0]
	ipsw_path = args.ipsw[0]

	api = API()
	api.check_device(identifier)
	api.fetch_api()

	ipsw = IPSW(ipsw_path)
	restoremanifest = manifest.RestoreManifest(ipsw.read_file('Restore.plist'), api.get_board())

	supported_devices = (8960, 7000, 7001, 8000, 8001, 8003, 8010, 8011, 8015)
	if restoremanifest.platform not in supported_devices:
		sys.exit(f"[ERROR] '{identifier}' is not supported by Inferius. Exiting.")

	buildmanifest = manifest.Manifest(ipsw.read_file('BuildManifest.plist'))

	ver_major = int(buildmanifest.version.split('.')[0])
	ver_major_minor = float(buildmanifest.version.rsplit('.', 1)[0])

	if ver_major == 10 and restoremanifest.platform != 8960:
		sys.exit(f'[ERROR] iOS {buildmanifest.version} can only be downgraded to on A7 devices currently. Exiting.')

	if not 11 <= ver_major <= 13 or ver_major_minor <= 10.1:
		sys.exit(f'[ERROR] iOS {buildmanifest.version} is not supported by Inferius. Exiting.')

	if identifier not in buildmanifest.supported_devices:
		sys.exit(f"[ERROR] IPSW '{ipsw_path}' does not support '{identifier}'. Exiting.")

	with tempfile.TemporaryDirectory() as tmpdir:
		if args.create:
			custom_ipsw = create_ipsw(identifier, buildmanifest, ipsw_path, tmpdir)
		else:
			custom_ipsw = ipsw_path

		if args.restore:
			restore_ipsw(identifier, buildmanifest.version, custom_ipsw, args.update, tmpdir)


if __name__ == '__main__':
	main()
