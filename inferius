#!/usr/bin/env python3

from utils.api import API
from utils.bundle import Bundle
from utils.dependencies import Checks
from utils.device import Device
from utils.ipsw import IPSW
from utils.manifest import Manifest, RestoreManifest
from utils.restore import Restore
import argparse
import platform
import os
import sys
import tempfile


def create_ipsw(identifier, buildmanifest, ipsw_path, tmpdir, bundle_path):
	print('Creating custom IPSW')

	api = API()
	api.fetch_api(identifier)
	boardconfig = api.get_board()
	bundle = Bundle()
	ipsw = IPSW(ipsw_path)

	print('[1] Grabbing Firmware Bundle...')
	if bundle_path is not None:
		print('Note: Using user provided Firmware Bundle.')
		valid_bundle = bundle.verify_bundle(bundle_path, tmpdir, api.api, buildmanifest.buildid, boardconfig)
		if valid_bundle == False:
			sys.exit(f"[ERROR] Bundle '{bundle_path}' is invalid. Exiting.")

	else:
		bundle.fetch_bundle(identifier, buildmanifest.version, buildmanifest.buildid, tmpdir)

	print('[2] Verifying IPSW...')
	ipsw.verify_ipsw(api.fetch_sha1(buildmanifest.buildid))

	print('[3] Extracting IPSW...')
	extracted_ipsw = '/'.join((tmpdir, 'ipsw'))
	os.mkdir(extracted_ipsw)
	ipsw.extract_ipsw(extracted_ipsw)

	print('[4] Patching components...')
	bundle.apply_patches(extracted_ipsw)

	api.fetch_latest(buildmanifest.fetch_component_path(boardconfig, 'LLB'), extracted_ipsw)
	bootloader_ver = api.fetch_latest(buildmanifest.fetch_component_path(boardconfig, 'iBoot'), extracted_ipsw)

	print('[5] Repacking IPSW...')
	custom_ipsw = ipsw.create_ipsw(extracted_ipsw, ipsw_path.split('/')[-1].rsplit('.', 1)[0] + '_custom.ipsw', bundle.check_update_support(), bootloader_ver)
	print(f"Finished creating custom IPSW: '{custom_ipsw}'.")

	return custom_ipsw

def restore_ipsw(identifier, buildmanifest, ipsw_path, updating, tmpdir):
	print('Restoring custom IPSW')

	api = API()
	api.fetch_api(identifier)
	Checks()
	device = Device(identifier)
	ipsw = IPSW(ipsw_path)
	restore = Restore(identifier, device.platform)

	print('[1] Verifying custom IPSW...')
	ipsw.verify_custom_ipsw(identifier, updating)

	print('[2] Checking for device in pwned DFU...')
	device.check_pwndfu()

	print('[3] Extracting bootchain...')
	ibss = buildmanifest.fetch_component_path(device.boardconfig, 'iBSS')
	ipsw.extract_file(ibss, '/'.join((tmpdir, 'ibss.im4p')))
	ibec = buildmanifest.fetch_component_path(device.boardconfig, 'iBEC')
	ipsw.extract_file(ibec, '/'.join((tmpdir, 'ibec.im4p')))

	print('[4] Signing bootchain...')
	restore.save_blobs(device.ecid, device.boardconfig, tmpdir)
	restore.sign_component('/'.join((tmpdir, 'ibss.im4p')), '/'.join((tmpdir, 'ibss.img4')))
	restore.sign_component('/'.join((tmpdir, 'ibec.im4p')), '/'.join((tmpdir, 'ibec.img4')))

	print('[5] Sending bootchain...')
	restore.send_component('/'.join((tmpdir, 'ibss.img4')), 'iBSS')
	restore.send_component('/'.join((tmpdir, 'ibec.img4')), 'iBEC')

	print('[6] Saving SHSH blobs...')
	restore.save_blobs(device.ecid, device.boardconfig, tmpdir, device.fetch_apnonce())

	print('[7] Restoring...')
	restore.restore(ipsw_path, device.baseband, updating)
	print(f'Finished restoring pwned iOS {buildmanifest.version} IPSW to your device.')

def main():
	parser = argparse.ArgumentParser(description='Inferius - Create & Restore 64-bit custom IPSWs', usage="inferius -d 'identifier' -f 'IPSW' [-c/-r] [-v]")
	parser.add_argument('-d', '--device', help='Device identifier', nargs=1)
	parser.add_argument('-f', '--ipsw', help='Path to IPSW', nargs=1)
	parser.add_argument('-c', '--create', help='Create custom IPSW', action='store_true')
	parser.add_argument('-r', '--restore', help='Restore custom IPSW', action='store_true')
	parser.add_argument('-b', '--bundle', help='(Optional) Path to local Firmware Bundle', nargs=1)
	parser.add_argument('-u', '--update', help='Keep data while restoring custom IPSW', action='store_true')
	args = parser.parse_args()

	if (not args.device or not args.ipsw) or \
	(not args.create and not args.restore) or \
	(args.update and not args.restore) or \
	(args.bundle and not args.create):
		sys.exit(parser.print_help(sys.stderr))

	if platform.system() == 'Windows':
		sys.exit('[ERROR] Inferius does not support Windows. Exiting.')

	identifier = args.device[0]
	ipsw_path = args.ipsw[0]

	api = API()
	api.check_device(identifier)
	api.fetch_api()

	ipsw = IPSW(ipsw_path)
	restoremanifest = RestoreManifest(ipsw.read_file('Restore.plist'), api.get_board())
	if restoremanifest.platform not in (8960, 7000, 7001, 8000, 8001, 8003, 8010, 8011, 8015):
		sys.exit(f"[ERROR] '{identifier}' is not supported by Inferius. Exiting.")

	buildmanifest = Manifest(ipsw.read_file('BuildManifest.plist'))

	ver_major = int(buildmanifest.version.split('.')[0])
	ver_major_minor = float(buildmanifest.version.rsplit('.', 1)[0])

	if ver_major == 10 and restoremanifest.platform != 8960:
		sys.exit(f'[ERROR] iOS {buildmanifest.version} can only be downgraded to on A7 devices currently. Exiting.')

	if not 11 <= ver_major <= 14 or ver_major_minor <= 10.1:
		sys.exit(f'[ERROR] iOS {buildmanifest.version} is not supported by Inferius. Exiting.')

	if identifier not in buildmanifest.supported_devices:
		sys.exit(f"[ERROR] IPSW '{ipsw_path}' does not support {identifier}. Exiting.")

	if args.bundle:
		bundle = args.bundle[0]
	else:
		bundle = None

	with tempfile.TemporaryDirectory() as tmpdir:
		if args.create:
			custom_ipsw = create_ipsw(identifier, buildmanifest, ipsw_path, tmpdir, bundle)
		else:
			custom_ipsw = ipsw_path

		if args.restore:
			restore_ipsw(identifier, buildmanifest, custom_ipsw, args.update, tmpdir)


if __name__ == '__main__':
	main()
